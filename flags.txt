-------------------
2) flags
main build action:
'--env, -e' - a name of the *.env file to load from ./env directory.
'--entry, -i' - specific entry point though we are going to parse module.json for them
'--output, -o' - 'Directory to place build files into' / also use *.env files
'--cwd', 'Use an alternative working directory' - default: '.'
'--sourcemap' - 'Generate source map' - default: true

@rollup/plugin-alias:
'--alias' - `Map imports to different modules`
example: fvttdev build --alias somepackage=newpackage')

string replace:
'--define' - 'Replace constants with hard-coded values'
example: 'fvttdev build --define API_KEY=1234'

rollup-plugin-terser:
'--compress' - 'Compress output using Terser' - true by default

------------------------------------------
Maybe needed (we may not need these)
   .option('--external', `Specify external dependencies, or 'none'`)
   .option('--globals', `Specify globals dependencies, or 'none'`)
   .example('esmbundle --globals jquery=$')

------------------------------------------------------------------

   prog
   .version(version)
   .option('--entry, -i', 'Entry module(s)')
   .option('--output, -o', 'Directory to place build files into')
   .option(
    '--format, -f',
    `Only build specified formats (any of ${DEFAULT_FORMATS} or iife)`,
    DEFAULT_FORMATS,
   )
   .option(
    '--pkg-main',
    'Outputs files analog to package.json main entries',
    true,
   )
   .option('--target', 'Specify your target environment (node or web)', 'web')
   .option('--external', `Specify external dependencies, or 'none'`)
   .option('--globals', `Specify globals dependencies, or 'none'`)
   .example('esmbundle --globals jquery=$')
   .option('--define', 'Replace constants with hard-coded values')
   .example('esmbundle --define API_KEY=1234')
   .option('--alias', `Map imports to different modules`)
   .example('esmbundle --alias somepackage=newpackage')
   .option('--compress', 'Compress output using Terser', null)
   .option('--strict', 'Enforce undefined global context and add "use strict"')
   .option('--name', 'Specify name exposed in UMD builds')
   .option('--cwd', 'Use an alternative working directory', '.')
   .option('--sourcemap', 'Generate source map', true)
   .example("esmbundle --no-sourcemap # don't generate sourcemaps");

   prog
   .command('build [...entries]', '', { 'default': true })
   .describe('Build once and exit')
   .action(cmd('build'));

   // Parse argv; add extra aliases
   return (argv) => prog.parse(argv, {
      alias: {
         o: ['output', 'd'],
         i: ['entry', 'entries', 'e']
      },
   });

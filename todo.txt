Today
-----------------------------------------
0. evaluate cosmicconfig for loading configuration files.
  - test postcss / terser

1. Refactor FVTTRepo / and data generated
  - Investigate reverseRelativePath and sourcemap path transformation.
    - make sure the module base path correctly transforms and check various CWD configurations
  - Make it a system plugin which takes an event message to generate "CommandData".

2. Refactor DynamicCommand
  - Store CLI flags
  - Implement `noop` flag
    - Print out basic data on runtime.
      - print detected module / system name & version
      - print number of bundles being generated and associated esmodule entry points
      - print copy / asset directories
  - Implement `metafile` flag -> This option tells CLI to write out JSON files with metadata about the runtime & command.
  - Create a finalize method which knows about `metafile` CLI flag to log data about CLI and command data.

3. bundle
  - create BundleUtil
    - create a manifest validator
    - abstract the bundle process

  - abstract the bundle writing process
    - always get bundle data back
    - write or manipulate (zip) in a post step

4. create package command

5. create NPMBundle CLI and get it up w/ @typhonjs-node-rollup/oclif-core

6. More default bundle CLI flags
  - add platform flag -> node, browser
  - add format flag -> iife, cjs, esm
  - add target flag -> es2020, es<XXXX>, modern, (chrome, firefox, safari, edge, or node) -> chrome58,firefox57,safari11,edge16,node12.19.0
  - add banner flag / test rollup output options
  - add footer flag / test rollup output options
  - add inject flag? / @rollup/plugin-virtual
  - add tsconfig flag -> explicit loading of a provided tsconfig file.
  - add babelconfig flag -> explicit loading of a provided babel config file.
  - add optional default settings - hidden no flag

7. flag handling
  - evaluate creating env-resolver
    - rebuild backbone-esnext-events / eventbus
    - rebuild typhonjs-plugin-manager
      - include NPM path and ESM dynamic module loading

8. create bumpver command

- create compendium builder command
  - examine PF2E https://gitlab.com/hooking/foundry-vtt---pathfinder-2e/-/tree/master/packs

- remove alias support from @typhonjs-node-rollup/plugin-bundle-core

------

Working modules
- Confetti
- GMScreen
- Hex-Size-Support

Working systems
- TwoDSix

-----

Investigate:
We may want to hydrate / expand on plugin configuration data after the repo is inspected.
  - plugin-alias is such an example

-----

5. WATCH WATCH WATCH

---

unbundle command

---

RollupRunner / Bundle Events
// Allow plugins a chance to parse any config data when
triggerAsync    'typhonjs:oclif:bundle:data:parse' -> packageData, bundleData

// Triggered during the rollup / bundle process allowing Oclif plugins to return specific Rollup plugins.
triggerAsync    'typhonjs:oclif:bundle:plugins:main:output:get' -> bundleData
triggerAsync    'typhonjs:oclif:bundle:plugins:npm:input:get' -> bundleData

--

?. Add multiple bundle events
   - add more event callbacks for plugins to respond to

------

Testing phase
---------
// TODO MUST CHECK CWD and directory path ramifications
  - CWD when loading esmodules entry point and local relative paths.
    - esmodules entry point is considered to be in the same directory as module / system.json.

- Consider looking if a verification method needs to be added to plugin-string for bad user data.
  Test w/ underlying Rollup plugin

- In bundle command there are multiple array includes usages, so consider structuring data differently for performance.

- Verify that npm bundles with existing sourcemaps still have correct source maps when further compressed by Terser.

---------
Known Conflicts (Rollup plugins)
- rollup-plugin-sourcemaps must be after @rollup/plugin-typescript otherwise things will fail for typescript.
  - current solution was to disable rollup-plugin-sourcemaps for the main bundle generation as it's only really
    necessary for including existing source maps of bundled npm modules.

---------

Before publishing
---------
- set default log level to info

- Info on setting up eslint for @babel/preset-env use:
https://griffa.dev/posts/setting-up-eslint-to-work-with-new-or-proposed-javascript-features-such-as-private-class-fields./

- Make and test a separate modules for FlagHandler & RollupRunner

---------

Keep in mind:
- Our CLI error handler is potentially a big fragile (needs better testing for node org / non-org modules).

- It appears that @oclif/plugin-not-found does not appear to play nice w/ dynamic command flags

---------

External projects:
backbone-esnext-events - triggerSync & triggerAsync will insert `null` for callbacks that match, but don't return a value.
typhonjs-package-util - `formatFromError` does not take into account NPM organizations.
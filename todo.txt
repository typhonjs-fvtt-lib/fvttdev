Today
-----------------------------------------
0. Look in refactoring dynamic flag loading to "DynamicCommand" base class.

1. Create separate NPM bundles

2. setup flags for the copy oclif / rollup module.

3. Integrate babel
   - Determine if the code to bundle is JS; set a configuration flag to kick off babel.

4. add in loading config files from file system.

5. Examine esmbundler and entry points / initial code handling for JS / TS


Testing phase
---------
// TODO MUST CHECK CWD and directory path ramifications
  - CWD when loading esmodules entry point and local relative paths.
    - esmodules entry point is considered to be in the same directory as module / system.json.

- Consider looking if a verification method needs to be added to plugin-string for bad user data.
  Test w/ underlying Rollup plugin

Before publishing
---------

- Make and test a separate modules for FlagHandler & RollupRunner

---------

Keep in mind:
- Our CLI error handler is potentially a big fragile (needs better testing for node org / non-org modules).

- It appears that @oclif/plugin-not-found does not appear to play nice w/ dynamic command flags

---------

External projects:
backbone-esnext-events - triggerSync & triggerAsync will insert `null` for callbacks that match, but don't return a value.
typhonjs-package-util - `formatFromError` does not take into account NPM organizations.